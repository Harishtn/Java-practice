//Expected Understanding: Abstraction, Inheritance, Dynamic Binding, Polymorphism (Overriding), Constructor Overloading


package Assignment2;

public abstract class India 
{
	public static String capital = "New Delhi";
	
	public abstract void speakLanguage();
	
	public abstract void eat();
	
	public abstract void dress();
	
	public India(String primeMinister)
	{
		System.out.println("Our Prime Minister is " + primeMinister);
	}
}


//---------------------------------------------------------------------------------------------------------------------------------------------------------


package Assignment2;

public abstract class SouthIndia extends India
{
	public SouthIndia(String primeMinister) 
	{
		super(primeMinister);
		
	}
	void cultivate()
	{
		System.out.println("Rice and Wheat cultivation");
	}
	void livingStyle()
	{
		System.out.println("Average development");
	}
	
}


//----------------------------------------------------------------------------------------------------------------------------------------------------------


package Assignment2;

public class TamilNadu extends SouthIndia
{
	static String capital = "Chennai";
	
	public TamilNadu(String primeMinister) 
	{
		super(primeMinister);
		
	}
	public static void main(String[] args) 
	{
		SouthIndia si = new TamilNadu("Harish");
		System.out.println(India.capital);	
		System.out.println(TamilNadu.capital);
	}
	@Override
	void speakLanguage()
	{
		System.out.println("Tamil");
		
	}
	@Override
	void eat() 
	{
		System.out.println("Briyani");
		
	}
	@Override
	void dress() 
	{
		System.out.println("Shirt Dhoti");
		
	}
	void cultivate()
	{
		System.out.println("Rice and Sugar cane cultivation");
	}
	void livingstyle()
	{
		System.out.println("Above Average development");
	}	

}
